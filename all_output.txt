To implement a single-player snake game running in the browser, we will need to create the following files:

1. `public/index.html`: This file will contain the HTML structure of our game. It will include a game board and score display.
2. `public/main.js`: This file will contain the JavaScript logic for our game. It will handle the game mechanics such as snake movement, food generation, collision detection, and score calculation.
3. `public/style.css`: This file will contain the CSS styles for our game. It will style the game board, snake, food, and score display.
4. `server.js`: This file will serve our static files and start our server.
5. `package.json`: This file will contain the metadata about our project and its dependencies.

Let's start by creating our `public/index.html` file:

public/index.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Snake Game</h1>
    <div id="game-board"></div>
    <h2 id="score">Score: 0</h2>
    <script src="main.js"></script>
</body>
</html>
```

Next, let's create our `public/main.js` file:

public/main.js

```js
const gameBoard = document.getElementById('game-board');
let scoreDisplay = document.getElementById('score');
let score = 0;
let snake = [{ top: 10, left: 10 }];
let direction = { top: 0, left: 0 };
let food = null;

function updateGame() {
    if (food === null) {
        food = { top: Math.floor(Math.random() * 20), left: Math.floor(Math.random() * 20) };
    }

    const head = { ...snake[0] }; // copy head
    head.top += direction.top;
    head.left += direction.left;

    if (head.top === food.top && head.left === food.left) {
        food = null;
        score += 10;
    } else {
        snake.pop();
    }

    snake.unshift(head);

    gameBoard.innerHTML = '';
    snake.forEach(part => {
        const snakeElement = document.createElement('div');
        snakeElement.style.gridRowStart = part.top;
        snakeElement.style.gridColumnStart = part.left;
        snakeElement.classList.add('snake');
        gameBoard.appendChild(snakeElement);
    });

    const foodElement = document.createElement('div');
    foodElement.style.gridRowStart = food.top;
    foodElement.style.gridColumnStart = food.left;
    foodElement.classList.add('food');
    gameBoard.appendChild(foodElement);

    scoreDisplay.textContent = `Score: ${score}`;
}

setInterval(updateGame, 200);

window.addEventListener('keydown', e => {
    switch(e.key) {
        case 'ArrowUp': direction = { top: -1, left: 0 }; break;
        case 'ArrowDown': direction = { top: 1, left: 0 }; break;
        case 'ArrowLeft': direction = { top: 0, left: -1 }; break;
        case 'ArrowRight': direction = { top: 0, left: 1 }; break;
    }
});
```

Next, let's create our `public/style.css` file:

public/style.css

```css
#game-board {
    display: grid;
    grid-template-rows: repeat(20, 1fr);
    grid-template-columns: repeat(20, 1fr);
    height: 400px;
    width: 400px;
    border: 1px solid black;
}

.snake {
    background-color: green;
    grid-area: 1 / 1 / 2 / 2;
}

.food {
    background-color: red;
    grid-area: 1 / 1 / 2 / 2;
}
```

Next, let's create our `server.js` file:

server.js

```js
const express = require("express");
const path = require("path");
const app = express();
const port = 8080;

// Serve the public directory
app.use(express.static(path.join(__dirname, "public")));

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
```

Finally, let's create our `package.json` file:

package.json

```json
{
  "name": "snake-game",
  "version": "1.0.0",
  "description": "A simple snake game",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1"
  }
}
```

To run the game, you would need to install the dependencies with `npm install` and then start the server with `npm start`. The game will be accessible at `http://localhost:8080`.